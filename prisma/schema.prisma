generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model bill {
  billID         Int      @id @default(autoincrement())
  vat            Int
  paymentStatus  String?
  netAmount      Float
  grandTotal     Float
  discount       Float?
  totalAmount    Float
  billCreateAt   DateTime
  billStatus     String
  Orders_orderID Int      @unique(map: "Bill_Orders_orderID_key")
  orders         orders   @relation(fields: [Orders_orderID], references: [orderID], map: "Bill_Orders_orderID_fkey")
  payment        payment?
}

model buffettypes {
  buffetTypeID    Int         @id @default(autoincrement())
  buffetTypePrice Int
  buffetTypesName String      @unique(map: "BuffetTypes_buffetTypesName_key")
  menuitems       menuitems[]
}

model customer {
  customerID    Int            @id @default(autoincrement())
  firstName     String
  lastName      String
  cusCreatedAt  DateTime      @default(now())
  CustomerEmail String        @unique
  password      String
  reservations  reservations[]
}

model employee {
  empID         Int             @id @default(autoincrement())
  empFname      String
  empLname      String
  empPhone      String
  position      String
  salary        Float
  orders        orders[]
  stock_in      stock_in[]
  stockout      stockout[]
  timescription timescription[]
}

model menuitems {
  menuItemsID              Int         @id @default(autoincrement())
  menuItemNameTHA          String
  menuItemNameENG          String
  menuItemsPrice           Int
  itemImage                String
  description              String?
  menuItemCreateAt         DateTime
  category                 String
  BuffetTypes_buffetTypeID Int
  buffettypes              buffettypes @relation(fields: [BuffetTypes_buffetTypeID], references: [buffetTypeID], map: "MenuItems_BuffetTypes_buffetTypeID_fkey")
  orderitem                orderitem[]

  @@index([BuffetTypes_buffetTypeID], map: "MenuItems_BuffetTypes_buffetTypeID_fkey")
}

model orderitem {
  Orders_orderID        Int
  MenuItems_menuItemsID Int
  Quantity              Int
  menuitems             menuitems @relation(fields: [MenuItems_menuItemsID], references: [menuItemsID], onDelete: Cascade, map: "orderItem_MenuItems_menuItemsID_fkey")
  orders                orders    @relation(fields: [Orders_orderID], references: [orderID], onDelete: Cascade, map: "orderItem_Orders_orderID_fkey")

  @@id([Orders_orderID, MenuItems_menuItemsID])
  @@index([MenuItems_menuItemsID], map: "orderItem_MenuItems_menuItemsID_fkey")
}

model orders {
  orderID        Int         @id @default(autoincrement())
  orderStatus    String?
  orderCreatedAt DateTime
  Tables_tabID   Int
  Employee_empID Int
  bill           bill?
  orderitem      orderitem[]
  employee       employee    @relation(fields: [Employee_empID], references: [empID], map: "Orders_Employee_empID_fkey")
  tables         tables      @relation(fields: [Tables_tabID], references: [tabID], map: "Orders_Tables_tabID_fkey")

  @@index([Employee_empID], map: "Orders_Employee_empID_fkey")
  @@index([Tables_tabID], map: "Orders_Tables_tabID_fkey")
}

model payment {
  paymentID    Int     @id @default(autoincrement())
  paymentTypes String?
  totalAmount  Float
  Bill_billID  Int     @unique(map: "Payment_Bill_billID_key")
  bill         bill    @relation(fields: [Bill_billID], references: [billID], map: "Payment_Bill_billID_fkey")
}

model reservations {
  resID               Int      @id @default(autoincrement())
  resDate             String
  resTime             String
  numberOfPeople      Int
  resStatus           String?
  resCreatedAt        DateTime
  Customer_customerID Int
  Tables_tabID        Int
  resPhone            String
  customer            customer @relation(fields: [Customer_customerID], references: [customerID], map: "Reservations_Customer_customerID_fkey")
  tables              tables   @relation(fields: [Tables_tabID], references: [tabID], map: "Reservations_Tables_tabID_fkey")

  @@index([Customer_customerID], map: "Reservations_Customer_customerID_fkey")
  @@index([Tables_tabID], map: "Reservations_Tables_tabID_fkey")
}

model stock {
  stockID         Int               @id @default(autoincrement())
  ingredientName  String            @unique(map: "Stock_ingredientName_key")
  costPrice       Float
  Unit            String
  Quantity        Float             @default(0)
  LastUpdated     DateTime
  stock_in_detail stock_in_detail[]
  stockoutdetail  stockoutdetail[]
  timescription   timescription[]
}

model stock_in {
  stockInID       Int               @id @default(autoincrement())
  stockInDateTime DateTime
  totalPrice      Float
  Employee_empID  Int
  note            String?
  employee        employee          @relation(fields: [Employee_empID], references: [empID], map: "Stock_In_Employee_empID_fkey")
  stock_in_detail stock_in_detail[]

  @@index([Employee_empID], map: "Stock_In_Employee_empID_fkey")
}

model stock_in_detail {
  stockInDetailID    Int      @id @default(autoincrement())
  ingredientName     String
  quantity           Float
  unit               String
  pricePerUnit       Float
  totalPrice         Float
  Stock_In_stockInID Int
  Stock_stockID      Int
  stock_in           stock_in @relation(fields: [Stock_In_stockInID], references: [stockInID], map: "Stock_In_Detail_Stock_In_stockInID_fkey")
  stock              stock    @relation(fields: [Stock_stockID], references: [stockID], map: "Stock_In_Detail_Stock_stockID_fkey")

  @@index([Stock_In_stockInID], map: "Stock_In_Detail_Stock_In_stockInID_fkey")
  @@index([Stock_stockID], map: "Stock_In_Detail_Stock_stockID_fkey")
}

model stockout {
  stockOutID     Int              @id @default(autoincrement())
  stockOutDate   DateTime
  totalPrice     Float
  note           String?
  empID          Int
  employee       employee         @relation(fields: [empID], references: [empID], map: "StockOut_empID_fkey")
  stockoutdetail stockoutdetail[]

  @@index([empID], map: "StockOut_empID_fkey")
}

model stockoutdetail {
  stockOutDetailID Int      @id @default(autoincrement())
  ingredientName   String
  quantity         Float
  unit             String
  pricePerUnit     Float
  totalPrice       Float
  stockOutID       Int
  stockID          Int
  stock            stock    @relation(fields: [stockID], references: [stockID], map: "StockOutDetail_stockID_fkey")
  stockout         stockout @relation(fields: [stockOutID], references: [stockOutID], map: "StockOutDetail_stockOutID_fkey")

  @@index([stockID], map: "StockOutDetail_stockID_fkey")
  @@index([stockOutID], map: "StockOutDetail_stockOutID_fkey")
}

model tables {
  tabID        Int            @id @default(autoincrement())
  tabTypes     String
  tabStatus    String?
  tabCreatedAt DateTime
  orders       orders[]
  reservations reservations[]
}

model timescription {
  TimeScriptionID Int       @id @default(autoincrement())
  Employee_empID  Int
  Stock_stockID   Int
  tsCreatedAt     DateTime?
  Unit            String?
  Quantity        Float?
  note            String?
  employee        employee  @relation(fields: [Employee_empID], references: [empID], map: "TimeScription_Employee_empID_fkey")
  stock           stock     @relation(fields: [Stock_stockID], references: [stockID], map: "TimeScription_Stock_stockID_fkey")

  @@index([Employee_empID], map: "TimeScription_Employee_empID_idx")
  @@index([Stock_stockID], map: "TimeScription_Stock_stockID_idx")
}
